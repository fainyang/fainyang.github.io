<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GitHub-Hexo-NexT 免费搭建自己的博客]]></title>
    <url>%2Fpost%2Fhexo-blog%2F</url>
    <content type="text"><![CDATA[关于写博客2018 年我在 GitHub 上看到强哥的博客，当时为之心动然后 Fork 了那个 repository。后来搬砖沦为社会人就断更了，在工作之后看到奥哥的博客，在他的安利之下，把之前的 Jekyll 的博客换成如今的 Hexo-NexT，打算记录下工作的点滴，学习的心得。一是分享，二是方便自己回顾和查阅。 GitHub如果没有 GitHub 账号，需要去官网 https://github.com/ 注册一个账号。账号注册好之后，需要创建一个 repository，名称格式为 xxx.github.io 例如我的 GitHub 名称为 fainyang, 浏览器显示的 URL 为 https://github.com/fainyang 那么我新建的 repository 就是 fainyang.github.io 申请完账号，创建了 repository 之后，下一步就是在自己的电脑上安装 Hexo。 HexoHexo——快速、简洁且高效的博客框架。官网 https://hexo.io/zh-cn/ 文档还有视频讲解如何安装 安装前提在安装 Hexo 之前，需要安装 Git 与 Node.js 请参考 这里 开始安装12345npm install hexo-cli -g npm install hexo --savehexo init &lt;folder&gt; # &lt;folder&gt; 自己取个文件夹名字cd &lt;folder&gt; # 移动到 &lt;folder&gt; 文件夹，不清楚当前路径，可以执行 Mac:pwd Windows: chdirnpm install #feiy-mac:Coding feiy$ pwd /Users/feiy/Coding 新建完成后，指定文件夹的目录如下：12345678.├── _config.yml #站点配置文件,主要就是修改这个文件├── package.json├── scaffolds #模板文件夹├── source #存放文章，图片的文件夹| ├── _drafts| └── _posts└── themes #主题文件夹，等会下载 NexT 主题 这是我的 _config.yml 配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: feiyang's blog subtitle: 费洋的博客description: 佛系咸鱼keywords:author: feiyanglanguage: zh-CN #网址的显示语言timezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://fainyang.github.io #需要修改为自己的网址enforce_ssl: fainyang.github.ioroot: /permalink: post/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map: tag_map: # Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/fainyang/fainyang.github.io.git #部署上传的地址，需要修改为自己的 branch: master message: new hexo_blog # Othersarchive_generator: per_page: 10 yearly: true monthly: truetag_generator: per_page: 10 Hexo 常用命令官网详细的介绍 https://hexo.io/zh-cn/docs/commands 123456命令缩写hexo n "文章标题" == hexo new "文章标题" #新建文章hexo p == hexo publishhexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署 本地运行网站123hexo s # 当前路径要在之前创建的 hexo init &lt;folder&gt; 这个 &lt;folder&gt; 下INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 在浏览器输入 http://localhost:4000 就可以看到初始的网站 NexTElegant Theme for Hexo——精于心，简于形。 官网 http://theme-next.iissnan.com/ 安装 Next1234# 当前路径要在之前创建的 hexo init &lt;folder&gt; 这个 &lt;folder&gt; 下 # 查看当前路径 Mac:pwd Windows: chdircd &lt;folder&gt;git clone https://github.com/theme-next/hexo-theme-next themes/next git clone 完成后，指定文件夹的目录如下：1234567891011.├── _config.yml #站点配置文件，主要就是修改这个文件├── package.json├── scaffolds #模板文件夹├── source #存放文章，图片的文件夹| ├── _drafts| └── _posts└── themes #主题文件夹，等会下载 NexT 主题 ├── landscape └── next └── _config.yml #主题配置文件，修改博客主题样式等 主题配置文件 _config.yml12345678910111213# 菜单显示项menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive# Schemes 主题选择，我用的是 Gemini#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 此时可以在本地预览一下运行命令 hexo s 部署到 GitHub部署前，需要修改配置文件里面的 git 地址12345deploy: type: git repo: https://github.com/yourname/yourname.github.io.git #部署上传的地址，需要修改为自己的 branch: master message: new hexo_blog 修改好 _config.yml 里的 deploy 模块后，就可以开始进行部署，上传到 GitHub1234npm install hexo-deployer-git --savehexo cleanhexo generatehexo deploy 第一次部署需要输入自己的 GitHub 账号和密码。后面更新部署时就不需要再次输入密码了。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188feiy-mac:fainyang.github.io feiy$ hexo clean #清除缓存INFO Deleted database.INFO Deleted public folder.feiy-mac:fainyang.github.io feiy$ hexo generate #生成文件INFO Start processingINFO Files loaded in 902 msINFO Generated: sitemap.xmlINFO Generated: atom.xmlINFO Generated: index.htmlINFO Generated: tags/index.htmlINFO Generated: categories/index.htmlINFO Generated: archives/index.htmlINFO Generated: about/index.htmlINFO Generated: img/combination1.pngINFO Generated: images/algolia_logo.svgINFO Generated: img/combination2.pngINFO Generated: img/404-southpark.jpgINFO Generated: img/favicon.icoINFO Generated: img/gay.jpegINFO Generated: images/apple-touch-icon-next.pngINFO Generated: img/old_driver.jpgINFO Generated: img/qq-qrcode.pngINFO Generated: img/zjxc.jpgINFO Generated: images/cc-by-nc-nd.svgINFO Generated: images/avatar.gifINFO Generated: images/cc-by-nc-sa.svgINFO Generated: images/cc-by-nc.svgINFO Generated: images/cc-by-sa.svgINFO Generated: images/cc-by-nd.svgINFO Generated: images/cc-by.svgINFO Generated: images/favicon.icoINFO Generated: images/quote-l.svgINFO Generated: images/cc-zero.svgINFO Generated: images/loading.gifINFO Generated: images/logo.svgINFO Generated: images/searchicon.pngINFO Generated: images/favicon-16x16-next.pngINFO Generated: images/placeholder.gifINFO Generated: images/favicon-32x32-next.pngINFO Generated: images/quote-r.svgINFO Generated: images/feiy.gifINFO Generated: archives/2019/03/index.htmlINFO Generated: archives/2018/02/index.htmlINFO Generated: post/hexo-blog/index.htmlINFO Generated: img/work/6.jpgINFO Generated: archives/2018/08/index.htmlINFO Generated: categories/学习/index.htmlINFO Generated: archives/2018/11/index.htmlINFO Generated: archives/2018/07/index.htmlINFO Generated: img/robot/run.pngINFO Generated: tags/python/index.htmlINFO Generated: categories/生活/index.htmlINFO Generated: tags/hexo/index.htmlINFO Generated: tags/工作/index.htmlINFO Generated: archives/2018/04/index.htmlINFO Generated: archives/2018/03/index.htmlINFO Generated: tags/links/index.htmlINFO Generated: post/Canteen/index.htmlINFO Generated: tags/NUS/index.htmlINFO Generated: img/2019/github.pngINFO Generated: post/Onboarding/index.htmlINFO Generated: post/Combination/index.htmlINFO Generated: post/Robot/index.htmlINFO Generated: post/blog/index.htmlINFO Generated: post/Master/index.htmlINFO Generated: post/links/index.htmlINFO Generated: post/timestampdiff/index.htmlINFO Generated: img/time3.pngINFO Generated: img/start.jpgINFO Generated: img/robot/tencent.pngINFO Generated: img/work/8.JPGINFO Generated: img/work/7.JPGINFO Generated: img/avatar-icon.jpgINFO Generated: img/time1.pngINFO Generated: img/wx-qrcode.pngINFO Generated: archives/2018/index.htmlINFO Generated: archives/2019/index.htmlINFO Generated: img/146228364162795.jpgINFO Generated: lib/font-awesome/HELP-US-OUT.txtINFO Generated: css/main.cssINFO Generated: img/canteen/bird.jpgINFO Generated: img/combination3.pngINFO Generated: img/time4.pngINFO Generated: img/path.jpgINFO Generated: img/time2.pngINFO Generated: img/work/10.JPGINFO Generated: img/work/5.JPGINFO Generated: img/work/13.JPGINFO Generated: img/work/2.JPGINFO Generated: img/work/1.JPGINFO Generated: lib/font-awesome/bower.jsonINFO Generated: img/robot/ditou.jpgINFO Generated: img/canteen/contact.pngINFO Generated: img/robot/happy.jpgINFO Generated: img/robot/poor.jpegINFO Generated: img/robot/miaohui.jpgINFO Generated: img/robot/qidai.jpegINFO Generated: img/robot/python.pngINFO Generated: img/robot/tuling.pngINFO Generated: img/canteen/B.pngINFO Generated: img/robot/dalao.pngINFO Generated: lib/velocity/velocity.ui.min.jsINFO Generated: lib/font-awesome/fonts/fontawesome-webfont.woff2INFO Generated: img/robot/result3.jpegINFO Generated: img/canteen/F-319.pngINFO Generated: img/canteen/F-320.pngINFO Generated: img/robot/result1.jpegINFO Generated: img/work/9.JPGINFO Generated: img/canteen/wen.pngINFO Generated: lib/font-awesome/fonts/fontawesome-webfont.woffINFO Generated: img/canteen/E1.pngINFO Generated: lib/velocity/velocity.ui.jsINFO Generated: lib/velocity/velocity.min.jsINFO Generated: img/canteen/E-322.pngINFO Generated: img/canteen/F-321.pngINFO Generated: img/canteen/F-322.pngINFO Generated: img/canteen/F-323.pngINFO Generated: img/canteen/Y-320.pngINFO Generated: img/canteen/Y-321.pngINFO Generated: img/canteen/Y-322.pngINFO Generated: img/work/12.JPGINFO Generated: img/robot/result2.jpegINFO Generated: img/work/4.JPGINFO Generated: img/canteen/E-319.pngINFO Generated: js/src/algolia-search.jsINFO Generated: lib/font-awesome/css/font-awesome.css.mapINFO Generated: img/issue.pngINFO Generated: img/combination4.pngINFO Generated: img/canteen/E-323.pngINFO Generated: img/work/3.JPGINFO Generated: img/canteen/Y-319.pngINFO Generated: img/canteen/table.pngINFO Generated: img/work/11.JPGINFO Generated: img/work/15.JPGINFO Generated: js/src/affix.jsINFO Generated: js/src/exturl.jsINFO Generated: js/src/next-boot.jsINFO Generated: js/src/scrollspy.jsINFO Generated: js/src/js.cookie.jsINFO Generated: js/src/post-details.jsINFO Generated: js/src/scroll-cookie.jsINFO Generated: lib/font-awesome/fonts/fontawesome-webfont.eotINFO Generated: img/canteen/Y-323.pngINFO Generated: img/canteen/E-321.pngINFO Generated: img/canteen/E-320.pngINFO Generated: lib/font-awesome/css/font-awesome.min.cssINFO Generated: lib/font-awesome/css/font-awesome.cssINFO Generated: js/src/motion.jsINFO Generated: js/src/utils.jsINFO Generated: js/src/schemes/pisces.jsINFO Generated: img/work/16.JPGINFO Generated: js/src/schemes/muse.jsINFO Generated: img/work/14.JPGINFO Generated: lib/jquery/index.jsINFO Generated: img/install-steps.gifINFO Generated: lib/velocity/velocity.jsINFO Generated: img/work/17.JPGINFO Generated: img/work/18.jpgINFO 152 files generated in 1.86 sfeiy-mac:fainyang.github.io feiy$ hexo deploy #部署到 GitHubINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master f55c4d1] new hexo_blog 34 files changed, 8859 insertions(+), 150 deletions(-) create mode 100644 archives/2019/03/index.html create mode 100644 archives/2019/index.html create mode 100644 categories/index.html create mode 100644 categories/学习/index.html create mode 100644 categories/生活/index.html create mode 100644 img/2019/github.png create mode 100644 post/hexo-blog/index.html create mode 100644 tags/NUS/index.html create mode 100644 tags/hexo/index.html rename tags/&#123;life =&gt; links&#125;/index.html (87%) create mode 100644 tags/工作/index.htmlEnumerating objects: 114, done.Counting objects: 100% (114/114), done.Delta compression using up to 4 threadsCompressing objects: 100% (43/43), done.Writing objects: 100% (69/69), 97.73 KiB | 3.62 MiB/s, done.Total 69 (delta 33), reused 0 (delta 0)remote: Resolving deltas: 100% (33/33), completed with 17 local objects.To https://github.com/fainyang/fainyang.github.io.git 2b7a9ca..f55c4d1 HEAD -&gt; masterBranch 'master' set up to track remote branch 'master' from 'https://github.com/fainyang/fainyang.github.io.git'.INFO Deploy done: git 在浏览器输入: yourname.github.io 如果看到博客页面那就大功告成。如果有错误的话，在 GitHub repository Setting 里的 GitHub Pages 可以看到错误信息。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实用链接分享]]></title>
    <url>%2Fpost%2Flinks%2F</url>
    <content type="text"><![CDATA[站在大佬们的肩膀上工作，学习，健身。 其实我蛮担心自己的发际线 运维博客 朱双印博客 iptables, ansible, zabbix 都很不错 骏马金龙 rsync, LVS, nginx, zooKeeper 金步国作品集 Linux HelloDog 大佬同事奥哥的博客 实用文档 ansible 批量操作的好帮手 zabbix 实时监控了解一下 ELK 收集过滤检索神器 Docker 方便快速的容器 Kubernetes DevOps 玩转容器部署 学习一个 慕课网 程序员的梦工厂 菜鸟教程 学的不仅是技术，更是梦想 w3school Web 技术教程]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>links</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新加坡留学分享]]></title>
    <url>%2Fpost%2FMaster%2F</url>
    <content type="text"><![CDATA[为什么要留学这篇博客主要分享我的新加坡水硕留学经历，希望能对你有一点点帮助。 留学的优势： 时间短，新加坡的授课型 Master 一年就读完。因为 EE 学院是按照学期收学费的，最快一年修完。大家当然都早点修完省学费。当国内同届的同学毕业时，你已经是有 2年工作经验的初级混子了。 毕业容易，毕业要求是修满 10 门课，没有导师。轻轻松松考完 10 门课混水硕文凭，考试是按照正态分布评分的，想挂科太难了。当然，你也可以选一个project跟着导师做一年项目，一个project抵两门课的学分。不要抱太大的期望，关键还是靠自学。 长见识，肉身翻墙出来看看世界之大，结识外国的朋友们，体验东南亚文化，然后你就知道还是祖国安逸，我多么想念四川美食。 当跳板，如果想出国工作，那么出国读书无疑是最好的一条路，毕业后留下来找工作。当然也有 Master 毕业再去美国读博的。 海龟光环，像华为的海外招聘回国工作的起薪比国内稍高一点。还有一个巨大的优势就是走海外选调生考公务员竞争小。 出游方便，因为新加坡是东南亚的经济中心，飞东南亚的航班又多又便宜。读书期间假期飞东南亚各国旅游，马来西亚，泰国，越南，印度尼西亚，菲律宾都非常方便。例如去年 recess week 我去槟城往返一共才 350 人民币的机票。 留学的劣势： 花费贵，硕士读下来至少 18 万人民币的学费，每个月生活费至少五千人民币。 压力大，虽然是水硕，但是全英文环境最开始还是有点不适应。如果选了 project，还要做项目写论文答辩。相当于把国内三年完成的事情全部压缩到一年内完成，十分的匆忙。 水土不服，这个因人而异。来新加坡读书有的同学瘦了十多斤，有的冒痘痘，有的脱发。但大家相同的感受就是太晒了（其实温度还好，最高 35° 左右）。 什么样的人适合来新加坡留学 安全第一，新加坡治安在世界数一数二了。在大学里去食堂吃饭把电脑，手机放图书馆桌上很安全。在我读书的一年里，没有听说中国留学生有谁遇到失窃的。晚上大街上走也很安全的。（相比于犯罪分子，倒不如小心野生动物，蛇，蜥蜴那些） 英语差的人，比如我自己。其实新加坡留学一年生活中，除了上课，和导师，外国人交流用英文。平时都用中文，本地华人的中文也非常好。（其实这也是缺点，读书一年，发现自己的口语没有怎么提高） 怕离家太远。新加坡回国非常快，飞中国南方的城市大约4个小时，而且往返机票（非节假日）大约两千多人民币。 负担不起美国留学，又想出来看看的人，比如我自己。新加坡的学费和生活费相对便宜。 国内考研失败，但想继续读研的同学，出国读研肯定比二战的压力小太多了。国内考研每年一次，国外读研申请分两次，有秋季和春季。 留学的条件就三点：学科成绩，英语成绩，留学费用。 学科成绩：NUS NTU 两所学校 Master 招生大部分都是 985，211的毕业生。NUS ECE学院基本上要本科成绩平均分85+，NTU EEE学院要求会稍微低一点。 英语成绩：NUS 雅思最低 6 分，NTU 雅思最低 6.5 分 但最好 NUS 也是6.5 分。 这样的话开学就不用额外再上英语课。雅思的备考，可以报班，也可以自学。推荐APP: 雅思哥，小站雅思。个人的建议是英语不好的同学还是花钱报班吧，老师带着入门快点。 留学费用：今年 NUS Master 入学的费用国际留学生一共是36,750新币。 以前是有 government-subsidised graduate programmes 补贴的(减免一半的学费)，但是从明年 2019 开始就没有了。读下来学费加生活费一年至少18+7=25万。申请的时候还需要银行开具存款证明，每年的标准不同，大概在人民币 15 万左右。 如何申请 找中介，适用于时间匆忙，想花钱省事的同学们。中介费大概在2万左右，中介老师会帮你写简历，文书，推荐信，邮寄申请材料等。推荐找大机构知名的中介，私人中介小心被坑。就算找了中介，自己还是要上点心，看看中介帮写的材料，注意申请的截止时间。 DIY，适用于时间充足，想省钱的同学。作为 DIY 过来人，新加坡和香港的申请都比较简单，申请的 requirement 网上都有，截止时间也都写的明明白白，只是需要自己细心的去寻找。如果有学长学姐指导，老司机带是最稳的。要自己 DIY 记得让父母申请一张 Visa 或者 Master Card，因为申请缴费的时候是不能用银联卡的。寄托论坛上也有前辈们分享如何申请的。 申请所需资料：本科成绩单，本科在读证明，语言成绩单(雅思或托福)，个人简历，2 封推荐信，个人陈述（申请的理由，规划那些），银行存款证明。 申请分秋季入学和春季入学。秋季是每年的一月开始申请，先在学校官网上申请，最后把所需的资料邮寄到学校，顺丰到新加坡只需 3 天。 入学前准备秋季入学是每年的五月初发 offer，寄托论坛也有 offer榜，可以看看其他人的录取情况。很多人都会收到两所学校的录取，那么上 NUS 还是选 NTU 呢？首先当然看看自己所读的专业哪个学校好啦，其实两所学校都差不多。NUS 在本地人眼里更好一点，离城里近，但申请不到宿舍，ECE 学院选课自由，有点像国内的按大类招生。 NTU 坐落在郊区，能申到宿舍。食堂十分的优秀，比 NUS 好吃。环境优美，有野猪等野生动物出没。 在收到 offer 后最重要的一件事情就是：申请宿舍，NUS Master 申请宿舍成功率低，因为 NUS 地方小宿舍少，几乎在 NUS 读 Master 的同学们都是在外面租房子，一般都是六个人租一整套三室一厅，两个人 share 一间房。租房子必须找中介，Property Guru 新加坡本地发布平台，房源多。查找 NUS 周围的房源，然后联系中介看房，最后签合同。一般 share 住房租人均在 450-600 新币/月，水电气网大约 50 新/月。 NTU 就很优秀了，人人都能申请到宿舍。宿舍的配套设施很完善，厨房，洗衣房，自习室，健身房，食堂都有。宿舍价格根据宿舍类型定价 300-600 新币/月。 把住的地方提前搞定后，等学校帮忙办理好学生签证，接下来就是收拾行李准备留学啦。 新加坡的手机网络，国内全网通手机就 OK，最好提前在淘宝买一张 3天无限流量卡。等安顿好了，再去 711、Cheers、手机店买本地电话卡。 必备的APP: Grab（东南亚滴滴，打车方便，可以绑定支付宝付款）SG Buses (坐公交车必备，查询等车时间) Google Maps (出国当然用谷歌) 银行卡：推荐办理在境外取现不收取手续费的银联卡。比如华夏银行，成都银行金卡等。 机票：廉价航空没有行李额！留学生过来读书肯定都带了箱子，等到机场再买行李额要贵哭。我建议是不要买廉价航空，川航、国航都是两件行李额，南航是一件。 新加坡全年夏天，衣服最多带一件外套抵御教室里寒冷的空调。这面的优衣库，H&amp;M 价格和国内差不多。 再安利一下同事奥哥写的新加坡生活指南，网站有可能被墙了。 学生生活 报到：到新加坡安顿好以后，就去学校注册报到，然后就是校医院体检（主要检查肺结核和 HIV ）。接下来还有半个月开学，可以出去逛一逛，熟悉一下环境。 选课：开学之前要网上选课，这个根据自己的爱好和学长学姐的建议，不要踩雷。可以选择 10门课，也可以选择 8门课 + 1个项目。 上课：时间都是在晚上（本科课程在白天，NUS 可以跨选本科的课程，NTU 不能选本科课程），因为有非全日制的同学（人家白天要上班的），一周最多也就5节课。 每周都会有作业，有的 project 还需要小组组队完成。 编程作业 GitHub了解一下，说不定有答案。 考试：在选课时就能看到期末考试日期，所以可以提前买回家的机票呀。考试时间一般是 2-2.5 小时，有开卷，闭卷，一页纸。评分按正态分布，想挂科和得 A+ 一样的困难。 混个水硕还是非常容易的。 项目： 选一个导师跟着做一年。NUS 最后要写论文答辩，NTU 写论文不答辩。确认过眼神，遇上对的老师收获巨大，选错就以泪洗面！ 毕业要求：总学分平均绩点大于3.0 （满绩是5.0 允许单科低于3.0 只要不是 F 就行，一般缺考才会得 F ） 就业去向：留下来的大多去了半导体和互联网公司，回国大部分都去互联网公司，少部分走海外选调生当公务员。 我的学生日常：白天早起去学校图书馆自习，起晚了太阳晒呀。白天自习，晚上上课。每周和导师一次 meeting 汇报情况。周末做作业、项目，偶尔出去聚餐。 如今回想起来，白天不上课应该去找一个实习做一做的，这样有助于就业。 第二学期就比较忙一点，因为要找工作。每学期学校都有招聘会，不容错过。其他找工作的途径，在我上一篇博客咸鱼入海Sea里有。新加坡半导体和互联网就业相对容易，新加坡工程系毕业的 Master 起薪大概在 3600-4500 新币/月。 新加坡个人所得税很低。Master 刚毕业一年大概就交 600 新的税。在新加坡上班，目前我自己的感受：互联网比国内轻松一点，很少加班，周末双休。 半导体上班同学的感受：Micron上班 8小时，加班有工资美滋滋。 Liteon 同学感觉就像在国企上班一样，每天 5:30pm 下班，闲的都想回学校再读一个part-time Phd. 曾经的我，以为出国遥不可及，担心给家里带来巨大的负担。如今看来一切付出都是值得的，至少在我的留学圈子里，没有哪个同学后悔出来看一看。很惭愧，只做了一点微小的贡献。 最后祝大家前程似锦，梦想成真]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>NUS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[咸鱼入海Sea]]></title>
    <url>%2Fpost%2FOnboarding%2F</url>
    <content type="text"><![CDATA[求职经历今年研究生毕业，在经历了一波三折的找工作之后。我这个咸鱼最终也找到了一份心仪的工作，在sea公司做Operation Enginner. 我是在春季的校园招聘会上投的简历，今天还翻到了曾经在招聘会上领取的资料 一般找工作的途径： 找学长学姐内推 通过校园招聘会现场投简历 公司官网在线投简历 招聘网站，像Monster，Glassdoor，Jobstreet. 如果是NUS学生，还可以通过NUS校园求职网站 总的来说，有内推是最好的，响应速度快，简历不容易被刷。其次是校园招聘会和校园求职网，都是校招，难度也低。 公司官网也可以，但要自己去一家家的找。专门的求职网站选择就很多，但自己要耐心的筛选（太多不知道的公司了，我曾经就被一家小作坊坑了，去面试的时候被那工作环境震惊）.心得体会，应届生进入社会第一课：虚心好学，接受自己的平庸。早做准备，明白自己想干什么。举例子，如果打算未来从事某一项工作，那就去看看网上这份工作的描述，对求职者的要求是什么。（PS:简历也是很重要的一部分）祝大家求职顺利! 公司介绍Sea是东南亚的一家互联网公司，旗下有garena（东南亚游戏代理：王者荣耀，英雄联盟等），shopee（东南亚的电商），airpay（想做东南亚的支付宝）。 公司的员工都很年轻，几乎都是美丽小姐姐、帅气小哥哥们，超级nice的。公司的环境也相当的棒： 入职大礼包 还有互联网公司标配的Mac Pro 两个戴尔 U2417H 显示器 公司福利 每个月还有两次马杀鸡按摩 还有最受好评的小卖部，视频链接在这里 早上还有一盒水果和晚上的工作餐 环境福利虽好，但每晚大概吃完饭都八点了，搬砖狗住！ 谨以此文记录咸鱼开启职场生活公司的职位在这里，需要内推的欢迎联系我email: feiy@seagroup.com]]></content>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NUS食堂排队指南]]></title>
    <url>%2Fpost%2FCanteen%2F</url>
    <content type="text"><![CDATA[人生苦短，珍惜时间在食堂吃饭，最怕长队漫漫，还有狗粮作伴。人生很多事情因为慢慢等待就错过了，本来打算去食堂吃某一样菜，却因为漫长的排队等待而望而却步。所以嘛，年轻人要想少留遗憾，就要主动出击，爱要提前行动呀！ 本文主要基于WiFi历史数据，分析NUS 工学院、文学院、YIH食堂的规律（本来最初还计划有computing食堂的，奈何系统上没有相关的信息记录）。用数据说话，分析每天食堂的拥挤时段给大家参考，以便大家减少排队时间，提高用餐体验。 假设每个用户只有一个设备（在食堂用电脑的也比较少），并且在校园内大多数人都会打开WiFi。我们根据WiFi的连接情况，可以间接的判断人群密度，停留时间，流入流出速率。人群密度只需要统计每分钟连接WiFi的设备数即可。停留时间是由思科WiFi系统记录设备第一次连接WiFi的时间和当前时间作差得出，当设备离线超过15min系统会刷新first located time。流入流出速率则是比较前后两分钟mac address的不同来判断得出。 首先举个例子好啦WiFi原始数据如下图所示： 可以在NUS Data Commons用NUS ID登录后在Cisco MSE下载。 经过分析处理，得到的结果图如下所示： 蓝色线条 代表总人数 红色线条 代表平均停留时间 绿色线条 代表流入率 黑色线条 代表流出率 上图是周一E1 6楼3月19号周一的情况。首先蓝色线条有5个峰值，而红色线条有5段逐渐增加的区间。两者结合，我们可知E1该天有5个上课时间段：9AM-11AM, 12PM-2PM, 2PM-4PM, 4PM-6PM, 6PM-9PM。因为在上课时间，总人数肯定比较多，随着课堂的进行，dwell time停留时间也在逐渐增加。在课堂的开始和下课阶段，流入和流出率较大。晚上的课大多数都是master课程，老师一般会在7:30左右课间休息，8:30左右下课。图中的结果和作者亲身经历也完全吻合，侧面说明我们处理分析数据的方法是正确的。 那如何分析食堂的数据呢？大家肯定想知道，什么时间去吃饭，不算太早但排队的人也不多呢？本文分析了2018年春季第10周（3.19-3.23）的数据，采用的分析方法是: 一般在总人数陡增前到达食堂是比较稳的，迟了队伍前面就是千军万马。 平均停留时间开始急速下降的时候，因为如果没有顾客，食堂的device平均停留时间会由于食堂员工的存在随时间不断增加。当有大量学生来时，平均停留时间会因为基数的增大而开始下降。 流入流出率这里不采用，是因为根据作者的亲身经历来看，每分钟的流入流出率因为不可能那么大。误差估计是WiFi系统对于每分钟probing（探测）设备的统计误差，时有时无造成的。 工学院食堂Engineer师生常去的食堂，价格也超级便宜。队伍比较长的一般是西餐，日本料理等。感觉这学期在E1的课比较少，每周只有周一晚上才去吃饭。下图是周一工学院食堂的情况，时间为10AM–7:30PM 从图中我们可以看出，在11:31时，蓝色线条总人数开始迅速增加，红色线条平均停留时间也开始下降，这不正是暴风雨前的预兆吗？说明这个时间是用餐高峰期的开始。同样的，晚餐的用餐高峰期是从5:20开始的。 文学院食堂文学院食堂作者最爱的是海南鸡饭，三楼凉拌功夫的麻辣香锅也很不错。作者曾经有一次亲身经历，11:40到文学院食堂，人多到我想放弃。。。下图是周一文学院食堂的情况，时间为10AM–7:30PM 文学院食堂从11:20，平均停留时间就开始下滑，11:30后总人数也是急剧攀升。说明这个11:20-11:30时间是用餐高峰期的开始。 晚餐虽然呈现出变化趋势，但真的一点都不拥挤。。。 YIH食堂YIH的mixed food每次人都超级多，排队时还经常可以吃狗粮，美滋滋。但YIH相比于前面两个食堂，人数明显是少很多，因为食堂本来就不是很大。下图是周一YIH食堂的情况，时间为10AM–7:30PM 从上图可以看出，午餐高峰时间从11:20开始，总人数开始增加，平均停留时间迅速减小，这不正是千军万马来临前的预兆吗？ 同样的，晚餐高峰是从5:29开始的。 表格总结 划重点每个食堂都分析了一周5天的数据，结果汇总在下表： 敲黑板:一般来说中午下课时间大概是在11:30，所以赶在这之前去食堂，人都会比较少。晚上除了YIH，其余两个食堂也不怎么拥挤。 剩下的图：周二到周五 最后的吐槽最后的一个月，马上就要毕业了，最近忙的没有时间写博客。课程，项目，论文，期末考试，找工作都是一座座艰难的大山。狗住Uo･ｪ･oU加油٩(●˙▿˙●)۶…⋆ฺ PS: 如果对这个分析有更好的建议，或者发现了错误之处。欢迎交流，联系方式在网页最下方。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>NUS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白也会用的微信机器人]]></title>
    <url>%2Fpost%2FRobot%2F</url>
    <content type="text"><![CDATA[天下武功，唯快不破这一篇文章是讲解如何安装微信自动回复机器人，独乐乐不如众乐乐。画风突转，先来一段鸡汤：并不是每个人都值得你腾出手中的事情秒回，如果有那么一个人，让你情不自禁地秒回了，说明那个人何其重要。或者说，你被别人秒回，又是多么温暖的存在啊。他秒回的瞬间，仿佛在说：你在我心中，很重要。 只可惜我只是一个机器人，惊不惊喜，意不意外？ 废话不多说，先来看一看效果图： 看完是不是有点小激动呢？ 老司机通道：会python的直接往下拉--看运行机器人程序 第一步安装python环境俗话说，人生苦短，我用python。安装python就像安装游戏、QQ一样，去官网下载安装包，只是安装后桌面没有运行图标，而是在我们的计算机上安装了一个运行环境。 看Windows-python安装教程如果不明白的话，再看看视频教程。 用苹果电脑的点击观看苹果电脑python安装教程。如果看不懂，可以去视频网站搜python安装教学视频，一边看视频一边依葫芦画瓢，我在这里就不详细说明了。万事开头难，搞不懂的话你可以微信问我呀，哈哈。 安装好以后，在Windows命令行 or Mac的终端检查一下python的version版本 安装python包当你把python环境安装好了以后，接下来你需要安装python包（python包是武林高手们打造的神兵利器，从新手村刚刚出来的你再也不用苦苦磨炼，自己去做武器啦） 那么问题来了，你怎么样从大侠手中借到神兵利器？？？这个时候就需要我们常说的py交易（开玩笑的啦），肯定是用pip。此外，这个机器人自动回复，需要两个包：一个是requests，另一个是itchat。 在Windows命令行 or Mac的终端 输入以下命令123pip install requestspip install itchat 当用pip借到大佬们的神兵利器后，终于可以开始打怪升级了，美滋滋。 运行机器人程序第一步需要点击下载源代码 下载时存放的地点要记住。下载之后解压文件Test-master.zip，其中的tuling.py就是我们的微信自动回复机器人小程序 。在文件夹中找到tuling.py,右键=&gt;打开方式用记事本打开，其中有两个地方需要修改。 第一个是图灵机器人的apikey，首先点击打开图灵机器人网站注册一个账号，免费创建一个机器人，得到机器人的apikey 第二个地方就是： 1itchat.auto_login(enableCmdQR=2) 修改为如下形式：这样是为了弹窗形式二维码比命令行形式的二维码清晰1itchat.auto_login() 至此，我们得到了机器人apikey，修改了二维码形式，就可以运行tuling.py了。 （最简单的小白法） Mac的终端 输入以下命令：12cd xxxx/Test-master #注释：先移动到tuling.py 所在文件python tuling.py #释：运行tuling.py Windows用户在Test-master文件夹打开命令行，方法为：在此文件夹窗口内空白区域右键单击（需要同时按住Shift），从菜单中选择＂在此处打开命令行窗口＂的项。 然后在命令窗口输入1python tuling.py 如果前面python包成功安装，运行将会弹出来一个网页登录的二维码。微信扫码登录后，看到命令窗口的个人信息就意味着大功告成了。12345678Getting uuid of QR code.Downloading QR code.Please scan the QR code to log in.Please press confirm on your phone.Loading the contact, this may take a little while.TERM environment variable not set.Login successfully as Fain 费洋Start auto replying. 但是这个机器人有一个缺陷：一旦运行python的电脑断网、休眠、关机。那么自动回复将会失效，因为自动回复的核心是电脑运行python调用图灵机器人来进行回复。但是对于小白来讲，这就已经足够~(≧▽≦)~啦啦啦。 兽（瘦）人永不为奴，云服务器永不关机我这周刚买的腾讯云服务器，学生优惠下来3年360，超级划算的。 我选择的系统是CentOS7.4（自带python2.7），需要安装python3.6–请参考教程1 和教程2 安装好python环境以后，也需要安装两个包，一个是requests，另一个是itchat。然后是在本地用scp把tuling.py 上传到云服务器，方法请参考这里。1scp 本地文件地址 云服务器登录名@云服务器公网IP/域名:云服务器文件地址 上传完成以后，运行试一试？结果你会发现当我们远程ssh关闭的时候，云服务器中的python程序也关闭了。为了能长时间运行，你需要使用Linux 技巧来续几年。 1setsid python tuling.py 这样我们的机器人就能在云服务器一直运行啦，直到天荒地老，海枯石烂？ 错！是服务器到期欠费。]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排列组合了解一下(阿里笔试题改编)]]></title>
    <url>%2Fpost%2FCombination%2F</url>
    <content type="text"><![CDATA[问题介绍假设有小费和小王俩好基友，天天形影不离，二人分在一个组。为了减少迟到的现象，班主任规定如下： 迟到一次，则当事人记一分。（迟到） 小组两人在某一天同时迟到，则小组总分再记一分。（连坐） 一周内如果每天都迟到，则当事人再扣一分。（太皮了） 三种情况可累加记分，一周结算一次小组总分。 肯定有人想说 举个例子好了下图为某一周的出勤情况：从图中看出小费同学比较皮，天天迟到！小王同学有两天和小费同学一起开黑，导致了迟到。所以总的小组计分为10分！ 那么问题来了：如果已知某一周小组的总分情况，列出可能的出勤表 咸鱼采用的暴力破解法有两个对象，每个对象有5个记录。每次记录的值有两种情况，我们可以暴力枚举出所有的情况。一共也才2的10次方，1024种情况。对于计算机来说，当然是小菜一碟咯。 所有上面的出勤图就可以简化为0-1数值图： 接下来问题就变成，如何枚举出这1024种情况？ 2行5列一共10个值，循环列出0-1111111111二进制数的情况，高位补0。 如上图，2列是独立的，我们只需求出5位的情况，两列互相遍历即可。 用python自带的 itertools库，分分钟枚举完成。 12345678910111213import itertoolsdef main(start_day,faith_score): Calendar=[[6,6,6,6,6],[6,6,6,6,6]] #模拟日历2行5列 L=list(itertools.product([0,1],repeat=5)) #枚举产生 leng=len(L) for i in range(leng):#两次遍历 for j in range(leng): Calendar[0]=L[i] Calendar[1]=L[j] if sumcredit(Calendar)==faith_score:#判断情况 gg=todate(Calendar,start_day) print(gg) #输出情况 只要有了枚举的所有情况，判断计分则是很容易的事情。 123456789101112131415161718192021222324252627282930def credit1(L): #迟到一次扣一分 credit=0 for i in L[0]: if i==1: credit+=1 for j in L[1]: if j==1: credit+=1 return creditdef credit2 (L): #一起迟到，多扣一分 credit=0 for i in range(5): if L[0][i]==1 and L[1][i]==1: credit+=1 return creditdef credit3 (L): #连续迟到，罪加一等 credit=0 if 0 not in L[0]: credit+=1 if 0 not in L[1]: credit+=1 return creditdef sumcredit(L): #累加总分 c1=credit1(L) c2=credit2(L) c3=credit3(L) return c1+c2+c3 时间问题，不容小觑因为时间在跨月份是时候有点麻烦，不能用普通的++，但我们可以用datetime库呀。输入一个起始时间，我们要得到那一周的5天。timedelta()函数你值得拥有。 12345678910111213141516171819from datetime import datetime,timedeltadef get_date(date): #Y表示四位数的年份(0-9999) date_begin=datetime.strptime(date,'%Y%m%d') time=str(datetime.date(date_begin)) date1=date_begin+timedelta(days=1) #加1s，哈哈 time1=str(datetime.date(date1)) date2=date_begin+timedelta(days=2) time2=str(datetime.date(date2)) date3=date_begin+timedelta(days=2) time3=str(datetime.date(date3)) date4=date_begin+timedelta(days=2) time4=str(datetime.date(date4)) return time,time1,time2,time3,time4 最后我们在输出 出勤情况的时候，将那个简化后的二维数组List=&gt;日历对应起来。 1234567891011def todate(L,date): time,time1,time2,time3,time4=get_date(date) record=[time+'-小费',time+'-小王',time1+'-小费',time1+'-小王',time2+'-小费',\ time2+'-小王',time3+'-小费',time3+'-小王',time4+'-小费',time4+'-小王'] L1=L[0]+L[1] for i in range(len(L1)): if L1[i]==1: #1 代表迟到 record[i]+='(迟到)' else: #0代表没迟到 record[i]+='(正常)' return record 假设我们输入date=20180305,score=0输出如下结果：123456['2018-03-04-小费(正常)', '2018-03-04-小王(正常)', '2018-03-05-小费(正常)', '2018-03-05-小王(正常)', '2018-03-06-小费(正常)', '2018-03-06-小王(正常)', '2018-03-06-小费(正常)', '2018-03-06-小王(正常)', '2018-03-06-小费(正常)', '2018-03-06-小王(正常)'][Finished in 0.2s] 假设我们输入date=20180305,score=1输出如下结果： 最后一点废话有一篇关于itertools的文章这段代码很Pythonic | 相见恨晚的 itertools 库 安利一下。此文章的python源代码 马上就要毕业了，再也没有当学生那种无忧无虑的感觉了。以前贪玩欠的债，找工作的时候哭出来。去面试才知道自己有多菜，所幸我还比较naive，未来珍惜时间，好好学习。狗住，加油！]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间求差值timestampdiff]]></title>
    <url>%2Fpost%2Ftimestampdiff%2F</url>
    <content type="text"><![CDATA[问题背景介绍因为Prof想知道每个building里的average-dwell时间，NUS-WiFi数据库提供了current-time，first-time。思路就是根据两者时间的差值来估计stay in building的时间。 人生苦短，首选python第一想法当然是用python，用python包：time, datetime.代码如下： 123456789101112131415import timeimport datetimedef difftime(begintime,endtime): date1=time.strptime(begintime,'%Y-%m-%d %H:%M:%S') date2=time.strptime(endtime,'%Y-%m-%d %H:%M:%S') #y两位数的年份表示（00-99） #Y四位数的年份表示（000-9999） date3=datetime.datetime( date1[0],date1[1],date1[2],date1[3],date1[4],date1[5]) date4=datetime.datetime( date2[0],date2[1],date2[2],date2[3],date2[4],date2[5]) minutes=(date4-date3).seconds/60 return minutes 结果如下图： MySQL 表示不服上学期我用python做的统计工作，例如每分钟有多少device，或者每个device在building里停留了多少分钟.用python至少得写30+行代码去读写csv文件，在MySQL就是一行代码的事情，相见恨晚。无知限制了我的生产力！MySQL的数据类型里有时间戳格式timestamp。也有专门计算时间差值的timestampdiff函数。TIMESTAMPDIFF(unit,begin,end);返回end-begin的时间差值。 1select timestampdiff(minute,firstime,curtime) 结果如下图： INSERT遇到问题了我想把timestampdiff返回的值插入在表的最后，先创建一个字段（列），再用insert插入，结果遇到了问题。 1insert into test (diff) select timestampdiff(minute,firstime,curtime) from test; 如图所示，结果是插在了diff列，但直接插在表的后面，没有覆盖原有的值。经过思考后，我尝试了 update的方法。 1update test set diff=timestampdiff(minute,firstime,curtime); 终于成功了！ 咸鱼的叹息python定义了一个函数来计算，用MySQL就是一句话的事情。光找这句话我就花了好久，还得好好学习。还是在项目中体会得多，光看书是不行的，纸上得来终觉浅。 很惭愧，连一点微小的工作都没有做，打扰了。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始blog啦]]></title>
    <url>%2Fpost%2Fblog%2F</url>
    <content type="text"><![CDATA[第一篇post虽然还不知道怎么用，先把这个网站搭起再说。生活需要多点乐趣，人生苦短，需要一点甜甜的爱。最幸福的事情莫过于找到所爱，所爱的事业，所爱的人。除了美食，最近我也慢慢开始发现编程的乐趣。今年的愿望是：每晚早点休息，年轻人不要熬夜。晚安]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
</search>
